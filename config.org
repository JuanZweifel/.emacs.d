#+TITLE: Kein's GNU Emacs Config
#+AUTHOR: Juan Luis Borquez Ormeno
#+DESCRIPTION: Kein's personal Emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#icons][ICONS]]
- [[#buffer-move][BUFFER MOVE]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#dired][DIRED]]
- [[#diminish][DIMINISH]]
- [[#doom-modeline][DOOM MODELINE]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable menubar, toolbars and scrollbars]]
  - [[#display-line-numbers-truncated-lines-and-relative-numbers][Display line numbers, truncated lines and relative numbers]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#language-modes][Language modes]]
  - [[#org-babel-support][Org-babel support]]
- [[#tree-sitter][TREE SITTER]]
- [[#magit][MAGIT]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling org bullets]]
  - [[#disable-electric-indent][Disable electric indent]]
  - [[#enabling-org-tempo][Enabling org-tempo]]
  - [[#evil-org][Evil org]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#smart-tabs][SMART TABS]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package undo-fu)

(use-package evil
  :bind (("<escape>" . keyboard-escape-quit))
  :init
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
  
  :config
  (setq tab-always-indent 'complete)
  (setq indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq evil-undo-system 'undo-fu)

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (setq evil-want-integration t)
  (evil-collection-init))

(use-package evil-tutor)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src

** General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer kein/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; leader key
    :global-prefix "M-SPC") ;; access leader in insert mode
#+end_src

*** Buffer keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "b" '(:ignore t :wk "Buffer")
  "bb" '(switch-to-buffer :wk "Switch this buffer")
  "bi" '(ibuffer :wk "Ibuffer")
  "bd" '(kill-this-buffer :wk "Kill this buffer")
  "bn" '(next-buffer :wk "Next buffer")
  "bp" '(previous-buffer :wk "Previous buffer")
  "br" '(revert-buffer :wk "Reload buffer"))
#+end_src

*** Code keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "c" '(:ignore t :wk "Code")
  "c" '(tree-sitter-debug-mode :wk "Tree sitter debug"))
#+end_src

*** Dired keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "d" '(:ignore t :wk "Dired")
  "d d" '(dired :wk "Open dired")
  "d j" '(dired-jump :wk "Dired jump to current")
  ;;"d n" '(neotree-dir :wk "Open directory in neotree")
  "d p" '(dired-preview-global-mode :wk "Dired preview"))
#+end_src

*** Magit keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "g" '(magit-status :wk "Magit"))
#+end_src

*** Eval keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "e" '(:ignore t :wk "Evaluate")
  "eb" '(eval-buffer :wk "Evaluate elisp in buffer")
  "ed" '(eval-defun :wk "Evaluate defun containing or after point")
  "ee" '(eval-expression :wk "Evaluate an elisp expression")
  "el" '(eval-last-sexp :wk "Evaluate and elisp expression")
  "er" '(eval-region :wk "Evaluate elisp in region"))
#+end_src

*** Help keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "h" '(:ignore t :wk "Help")
  "hf" '(describe-function :wk "Describe function")
  "ht" '(load-theme :wk "Load theme")
  "hv" '(describe-variable :wk "Describe variable")
  "hrr" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Reload emacs config"))
#+end_src

*** Toggle keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "t" '(:ignore t :wk "Toggle")
  "tl" '(display-line-numbers-mode :wk "Toggle line numbers")
  "ts" '(smart-tabs-mode :wk "Toggle smart tabs")
  "tt" '(visual-line-mode :wk "Toggle truncated lines")
  "tv" '(vterm-toggle :wk "Toggle vterm"))
#+end_src

*** Windows keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "w" '(:ignore t :wk "Windows")
  ;; Window splits
  "wd" '(evil-window-delete :wk "Close window")
  "wn" '(evil-window-new :wk "New window")
  "ws" '(evil-window-split :wk "Horizontal split window")
  "wv" '(evil-window-vsplit :wk "Vertical split window")
  ;; Window motions
  "wh" '(evil-window-left :wk "Window left")
  "wj" '(evil-window-down :wk "Window down")
  "wk" '(evil-window-up :wk "Window up")
  "wl" '(evil-window-right :wk "Window right")
  "ww" '(evil-window-next :wk "Goto next window")
  ;; Move Windows
  "wH" '(buf-move-left :wk "Buffer move left")
  "wJ" '(buf-move-down :wk "Buffer move down")
  "wK" '(buf-move-up :wk "Buffer move up")
  "wL" '(buf-move-right :wk "Buffer move right"))
#+end_src

*** Org keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "m" '(:ignore t :wk "Org")
  "ma" '(org-agenda :wk "Org agenda")
  "me" '(org-export-dispatch :wk "Org export dispatch")
  "m'" '(org-edit-src-code :wk "Edit src code")
  "mi" '(org-toggle-item :wk "Org toggle item")
  "mt" '(org-todo :wk "Org todo")
  "mB" '(org-babel-tangle :wk "Org babel tangle")
  "mT" '(org-todo-list :wk "Org todo list")
  "mx" '(org-babel-execute-src-block :wk "Execute src block")
  ;; Tables
  "mb" '(:ignore t :wk "Tables")
  "mb-" '(org-todo-list :wk "Insert hline in table")
  ;; Date/deadline
  "md" '(:ignore t :wk "Date/deadline")
  "mdt" '(org-time-stamp :wk "Org time stamp"))
#+end_src

*** Open keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "o" '(:ignore t :wk "Open")
  "oc" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Open emacs config")
  "os" '((lambda () (interactive) (switch-to-buffer "*scratch*")) :wk "Open scratch buffer")
  "od" '(dashboard-open :wk "Open dashboard"))
#+end_src

*** Other keybindings
#+begin_src emacs-lisp
(kein/leader-keys
  "SPC" '(counsel-M-x :wk "Counsel M-x")
  "." '(find-file :wk "Find file")
  "fr" '(counsel-recentf :wk "Find recent files")
  "TAB TAB" '(comment-line :wk "Comment lines"))

#+end_src
#+begin_src emacs-lisp
)
#+end_src
* ICONS
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BUFFER MOVE
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* COMPANY
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
                                
;;(use-package peep-dired
;;  :after dired
;; :hook (evil-normalize-keymaps . peep-dired-hook)
;; :config
;;  (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
;;  (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
;; (evil-define-key 'normal dired-mode-map (kbd "j") 'peep-dired-next-file)
;; (evil-define-key 'normal dired-mode-map (kbd "k") 'peep-dired-prev-file))

(use-package dired-preview
  :init 
    (dired-preview-global-mode 1)
  :after dired
  :config
    (setq dired-preview-delay 0))
#+end_src

* DIMINISH
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* DOOM MODELINE
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

* FLYCHECK
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* FONTS
Defining the various fonts that Emacs will use
** TODO Setting the font face
#+begin_src emacs-lisp

#+end_src
** Zooming In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
** Disable menubar, toolbars and scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display line numbers, truncated lines and relative numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
(global-visual-line-mode t)
#+end_src

* IVY (COUNSEL)
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
    
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
    
  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* LANGUAGE SUPPORT
** Language modes
#+begin_src emacs-lisp
(use-package go-mode)
(use-package kotlin-mode)
(use-package typescript-mode)
#+end_src

** Org-babel support
#+begin_src emacs-lisp
(use-package ob-kotlin)
(use-package ob-typescript)
#+end_src

* TREE SITTER
#+begin_src emacs-lisp
(use-package tree-sitter-langs :ensure t)
(use-package tree-sitter
  :init (global-tree-sitter-mode)
  :config (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

* MAGIT
#+begin_src emacs-lisp
(use-package magit)
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling org bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable electric indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Enabling org-tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Evil org 
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :init
  (add-hook 'org-mode-hook 'evil-org-mode)
  :after org
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

* PROJECTILE
#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :config
  (projectile-mode 1))
#+end_src

* RAINBOW MODE
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

* SHELLS AND TERMINALS

** Eshell
#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/bash"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* SMART TABS
#+begin_src emacs-lisp
(use-package smart-tabs-mode
  :commands (smart-tabs-mode)
  :init
  (add-hook 'c-mode-common-hook #'smart-tabs-mode)
  :config
  (smart-tabs-advice c-indent-line     c-basic-offset)
  (smart-tabs-advice c-indent-region   c-basic-offset)
  )
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (kein/leader-keys
      "fs" '(sudo-edit-find-file :wk "Sudo find file")
      "fS" '(sudo-edit-find-file :wk "Sudo edit file")))
#+end_src

* THEME
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(load-theme 'kein t)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-columns 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " -> "))
#+end_src
